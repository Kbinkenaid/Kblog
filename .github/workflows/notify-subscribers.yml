name: Notify Subscribers on New Post

on:
  push:
    branches: [ main ]
    paths: 
      - 'content/posts/**'

jobs:
  notify-subscribers:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'Add new blog post') || contains(github.event.head_commit.added, 'content/posts/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for new posts
        id: check_posts
        run: |
          # Get list of added markdown files in posts directory
          NEW_POSTS=$(git diff --name-only --diff-filter=A HEAD~1 HEAD | grep '^content/posts/.*\.md$' || true)
          
          if [ -n "$NEW_POSTS" ]; then
            echo "new_posts_found=true" >> $GITHUB_OUTPUT
            echo "posts<<EOF" >> $GITHUB_OUTPUT
            echo "$NEW_POSTS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "new_posts_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.check_posts.outputs.new_posts_found == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        if: steps.check_posts.outputs.new_posts_found == 'true'
        run: |
          npm init -y
          npm install nodemailer

      - name: Extract post metadata and send emails
        if: steps.check_posts.outputs.new_posts_found == 'true'
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          BLOG_URL: ${{ vars.BLOG_URL || 'https://kbinkenaid.github.io/Kblog/' }}
        run: |
          cat << 'EOF' > send-notifications.js
          const nodemailer = require('nodemailer');
          const fs = require('fs');
          const path = require('path');
          
          async function sendNotifications() {
            try {
              // Read subscribers
              const subscribersData = JSON.parse(fs.readFileSync('data/subscribers.json', 'utf8'));
              const subscribers = subscribersData.subscribers || [];
              
              if (subscribers.length === 0) {
                console.log('No subscribers found.');
                return;
              }
              
              // Get new posts from environment
              const newPosts = process.env.NEW_POSTS ? process.env.NEW_POSTS.split('\n').filter(Boolean) : [];
              
              if (newPosts.length === 0) {
                console.log('No new posts found.');
                return;
              }
              
              // Configure email transporter for SendGrid
              const transporter = nodemailer.createTransporter({
                host: 'smtp.sendgrid.net',
                port: 587,
                secure: false,
                auth: {
                  user: process.env.EMAIL_USER,
                  pass: process.env.EMAIL_PASS
                }
              });
              
              // Process each new post
              for (const postPath of newPosts) {
                console.log(`Processing post: ${postPath}`);
                
                // Read post content
                const postContent = fs.readFileSync(postPath, 'utf8');
                const frontMatterMatch = postContent.match(/^---\n([\s\S]*?)\n---/);
                
                let title = 'New Blog Post';
                let date = new Date().toDateString();
                
                if (frontMatterMatch) {
                  const frontMatter = frontMatterMatch[1];
                  const titleMatch = frontMatter.match(/title:\s*["']?([^"'\n]+)["']?/);
                  const dateMatch = frontMatter.match(/date:\s*(\d{4}-\d{2}-\d{2})/);
                  
                  if (titleMatch) title = titleMatch[1];
                  if (dateMatch) date = new Date(dateMatch[1]).toDateString();
                }
                
                // Generate post URL
                const filename = path.basename(postPath, '.md');
                const postUrl = `${process.env.BLOG_URL}posts/${filename}/`;
                
                // Create email content
                const emailHtml = `
                  <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="text-align: center; margin-bottom: 30px;">
                      <h1 style="color: #333; font-size: 28px; margin-bottom: 10px;">üìù New Blog Post</h1>
                      <p style="color: #666; font-size: 16px;">Kblog - Cybersecurity & Tech Insights</p>
                    </div>
                    
                    <div style="background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 8px; padding: 25px; margin-bottom: 25px;">
                      <h2 style="color: #333; font-size: 24px; margin-bottom: 15px;">${title}</h2>
                      <p style="color: #666; font-size: 14px; margin-bottom: 20px;">Published on ${date}</p>
                      <a href="${postUrl}" style="display: inline-block; background: #333; color: white; text-decoration: none; padding: 12px 24px; border-radius: 6px; font-weight: 500;">Read Full Post ‚Üí</a>
                    </div>
                    
                    <div style="text-align: center; color: #666; font-size: 14px; border-top: 1px solid #e9ecef; padding-top: 20px;">
                      <p>You're receiving this because you subscribed to blog updates.</p>
                      <p><a href="${process.env.BLOG_URL}" style="color: #666;">Visit Kblog</a></p>
                    </div>
                  </div>
                `;
                
                const emailText = `
New Blog Post: ${title}

Published on ${date}

Read the full post: ${postUrl}

---
You're receiving this because you subscribed to blog updates.
Visit: ${process.env.BLOG_URL}
                `.trim();
                
                // Send to all subscribers
                for (const subscriber of subscribers) {
                  try {
                    await transporter.sendMail({
                      from: `"Kblog" <${process.env.EMAIL_USER}>`,
                      to: subscriber.email,
                      subject: `üìù New Post: ${title}`,
                      text: emailText,
                      html: emailHtml
                    });
                    console.log(`Email sent to ${subscriber.email}`);
                  } catch (error) {
                    console.error(`Failed to send email to ${subscriber.email}:`, error.message);
                  }
                }
              }
              
              console.log('Notification process completed.');
              
            } catch (error) {
              console.error('Error sending notifications:', error);
              process.exit(1);
            }
          }
          
          sendNotifications();
          EOF
          
          NEW_POSTS="${{ steps.check_posts.outputs.posts }}" node send-notifications.js